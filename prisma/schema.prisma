generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Users {
    id              String     @id @default(uuid())
    firstName       String
    lastName        String?
    userName        String     @unique
    email           String     @unique
    password        String
    profileImageUrl String     @default("https://i.pinimg.com/280x280_RS/e1/08/21/e10821c74b533d465ba888ea66daa30f.jpg")
    isAdmin         Boolean    @default(false)
    createdAt       DateTime   @default(now())
    updatedAt       DateTime   @updatedAt
    addressId       String?
    addresses       Address[]
    orders          Orders[]
    reviews         Reviews[]
    sessions        Sessions[]
    carts           Carts[]
}

model Products {
    id            String       @id @default(uuid())
    name          String
    description   String
    price         Int
    categoryId    String
    stock         Int       @default(0)
    imagesUrl     String[]
    averageRating Float?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    category      Categorys    @relation(fields: [categoryId], references: [id])
    orderItems    OrderItems[]
    reviews       Reviews[]
    cartItems     CartItems[]
}

model Address {
    id         String   @id @default(uuid())
    userId     String
    street     String
    city       String
    state      String
    postalCode String
    country    String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       Users    @relation(fields: [userId], references: [id])
    orders     Orders[]
}

model Categorys {
    id            String     @id @default(uuid())
    name          String
    description   String
    totalProducts Int        @default(0)
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    products      Products[]
}

model Orders {
    id                String        @id @default(uuid())
    userId            String
    orderDate         DateTime      @default(now())
    totalAmount       Int
    status            OrderStatus   @default(PENDING)
    shippingAddressId String
    paymentMethod     PaymentMethod
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt
    user              Users         @relation(fields: [userId], references: [id])
    shippingAddress   Address       @relation(fields: [shippingAddressId], references: [id])
    orderItems        OrderItems[]
}

model OrderItems {
    id        String   @id @default(uuid())
    orderId   String
    productId String
    quantity  Int
    price     Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    order     Orders   @relation(fields: [orderId], references: [id])
    product   Products @relation(fields: [productId], references: [id])
}

model Reviews {
    id        String   @id @default(uuid())
    productId String
    userId    String
    rating    Int
    comment   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    product   Products @relation(fields: [productId], references: [id])
    user      Users    @relation(fields: [userId], references: [id])
}

model Carts {
    id        String      @id @default(uuid())
    userId    String
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    user      Users       @relation(fields: [userId], references: [id])
    cartItems CartItems[]
}

model CartItems {
    id        String   @id @default(uuid())
    cartId    String
    productId String
    quantity  Int
    price     Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    cart      Carts    @relation(fields: [cartId], references: [id])
    product   Products @relation(fields: [productId], references: [id])
}

model Sessions {
    id        String   @id @default(cuid())
    userId    String
    token     String
    user      Users    @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    expiresAt DateTime
    isRevoked Boolean  @default(false)
}

enum OrderStatus {
    PENDING
    COMPLETED
}

enum PaymentMethod {
    COD
    ONLINE
}
